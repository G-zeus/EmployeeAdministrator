security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: userName
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        company:
            lazy: true
            pattern: ^/login/empresa|^/admin
            provider: app_user_provider
            custom_authenticator: App\Security\AuthAuthenticator
            form_login:
                login_path: app_login_company
                check_path: app_login_company
            entry_point: form_login
            logout:
                path: app_logout


        employed:
            lazy: true
            pattern: ^/login/empleado\/profile
            provider: app_user_provider
            custom_authenticator: App\Security\AuthAuthenticator
            form_login:
                login_path: app_login_user
                check_path: app_login_user
            entry_point: form_login
            logout:
                path: app_logout

        api:
            lazy: true
            pattern: ^/api
            provider: app_user_provider
            custom_authenticator: App\Security\AuthAuthenticator
            http_basic:
                realm: Secured Area
            form_login:
                login_path: app_login
                check_path: app_login
            entry_point: form_login


        main:
            lazy: true
            provider: app_user_provider
            logout:
                path: app_logout

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
#         - { path: ^/admin, roles: COMPANY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
